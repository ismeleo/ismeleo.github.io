{"version":3,"sources":["../zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","../zxing-scanner/src/lib/zxing-scanner.component.ts","../zxing-scanner/src/lib/zxing-scanner.component.html","../zxing-scanner/src/lib/zxing-scanner.module.ts","../zxing-scanner/src/public_api.ts","./$_lazy_route_resource lazy namespace object","./src/app/app-info-dialog/app-info-dialog.component.ts","./src/app/app-info-dialog/app-info-dialog.component.html","./src/app/app-info/app-info.component.ts","./src/app/app-info/app-info.component.html","./src/app/app-ui.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/barcode-formats.ts","./src/app/formats-dialog/formats-dialog.component.ts","./src/app/formats-dialog/formats-dialog.component.html","./src/app/public_api.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["/// <reference path=\"./image-capture.d.ts\" />\n\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ResultAndError } from './ResultAndError';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\n\n  /**\n   * Exposes _tochAvailable .\n   */\n  public get isTorchAvailable(): Observable<boolean> {\n    return this._isTorchAvailable.asObservable();\n  }\n\n  /**\n   * Says if there's a torch available for the current device.\n   */\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\n\n  /**\n   * The device id of the current media device.\n   */\n  private deviceId: string;\n\n  /**\n   * If there's some scan stream open, it shal be here.\n   */\n  private scanStream: BehaviorSubject<ResultAndError>;\n\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param callbackFn The callback to be executed after every scan attempt\n   * @param deviceId The device's to be used Id\n   * @param videoSource A new video element\n   */\n  public continuousDecodeFromInputVideoDevice(\n    deviceId?: string,\n    videoSource?: HTMLVideoElement\n  ): Observable<ResultAndError> {\n\n    this.reset();\n\n    // Keeps the deviceId between scanner resets.\n    if (typeof deviceId !== 'undefined') {\n      this.deviceId = deviceId;\n    }\n\n    if (typeof navigator === 'undefined') {\n      return;\n    }\n\n    const scan$ = new BehaviorSubject<ResultAndError>({});\n\n    try {\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\n      this.getStreamForDevice({ deviceId })\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\n    } catch (e) {\n      scan$.error(e);\n    }\n\n    this._setScanStream(scan$);\n\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\n\n    return scan$.asObservable();\n  }\n\n  /**\n   * Gets the media stream for certain device.\n   * Falls back to any available device if no `deviceId` is defined.\n   */\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\n    const constraints = this.getUserMediaConstraints(deviceId);\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    return stream;\n  }\n\n  /**\n   * Creates media steram constraints for certain `deviceId`.\n   * Falls back to any environment available device if no `deviceId` is defined.\n   */\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\n\n    const video = typeof deviceId === 'undefined'\n      ? { facingMode: { exact: 'environment' } }\n      : { deviceId: { exact: deviceId } };\n\n    const constraints: MediaStreamConstraints = { video };\n\n    return constraints;\n  }\n\n  /**\n   * Enables and disables the device torch.\n   */\n  public setTorch(on: boolean): void {\n\n    if (!this._isTorchAvailable.value) {\n      // compatibility not checked yet\n      return;\n    }\n\n    const tracks = this.getVideoTracks(this.stream);\n\n    if (on) {\n      this.applyTorchOnTracks(tracks, true);\n    } else {\n      this.applyTorchOnTracks(tracks, false);\n      // @todo check possibility to disable torch without restart\n      this.restart();\n    }\n  }\n\n  /**\n   * Update the torch compatibility state and attachs the stream to the preview element.\n   */\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\n    this.updateTorchCompatibility(stream);\n    return this.attachStreamToVideo(stream, videoSource);\n  }\n\n  /**\n   * Checks if the stream supports torch control.\n   *\n   * @param stream The media stream used to check.\n   */\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\n\n    const tracks = this.getVideoTracks(stream);\n\n    for (const track of tracks) {\n      if (await this.isTorchCompatible(track)) {\n        this._isTorchAvailable.next(true);\n        break;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param stream The video stream where the tracks gonna be extracted from.\n   */\n  private getVideoTracks(stream: MediaStream) {\n    let tracks = [];\n    try {\n      tracks = stream.getVideoTracks();\n    }\n    finally {\n      return tracks || [];\n    }\n  }\n\n  /**\n   *\n   * @param track The media stream track that will be checked for compatibility.\n   */\n  private async isTorchCompatible(track: MediaStreamTrack) {\n\n    let compatible = false;\n\n    try {\n      const imageCapture = new ImageCapture(track);\n      const capabilities = await imageCapture.getPhotoCapabilities();\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\n    }\n    finally {\n      return compatible;\n    }\n  }\n\n  /**\n   * Apply the torch setting in all received tracks.\n   */\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\n    tracks.forEach(track => track.applyConstraints({\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\n    }));\n  }\n\n  /**\n   * Correctly sets a new scanStream value.\n   */\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\n    // cleans old stream\n    this._cleanScanStream();\n    // sets new stream\n    this.scanStream = scan$;\n  }\n\n  /**\n   * Cleans any old scan stream value.\n   */\n  private _cleanScanStream(): void {\n\n    if (this.scanStream && !this.scanStream.isStopped) {\n      this.scanStream.complete();\n    }\n\n    this.scanStream = null;\n  }\n\n  /**\n   * Decodes values in a stream with delays between scans.\n   *\n   * @param scan$ The subject to receive the values.\n   * @param videoElement The video element the decode will be applied.\n   * @param delay The delay between decode results.\n   */\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\n\n    // stops loop\n    if (scan$.isStopped) {\n      return;\n    }\n\n    let result: Result;\n\n    try {\n      result = this.decode(videoElement);\n      scan$.next({ result });\n    } catch (error) {\n      // stream cannot stop on fails.\n      if (\n        !error ||\n        // scan Failure - found nothing, no error\n        error instanceof NotFoundException ||\n        // scan Error - found the QR but got error on decoding\n        error instanceof ChecksumException ||\n        error instanceof FormatException\n      ) {\n        scan$.next({ error });\n      } else {\n        scan$.error(error);\n      }\n    } finally {\n      const timeout = !result ? 0 : delay;\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\n    }\n  }\n\n  /**\n   * Restarts the scanner.\n   */\n  private restart(): Observable<ResultAndError> {\n    // reset\n    // start\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\n  }\n\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport {\n  ArgumentException,\n  BarcodeFormat,\n  DecodeHintType,\n  Exception,\n  Result\n} from '@zxing/library';\n\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\nimport { ResultAndError } from './ResultAndError';\n\n@Component({\n  selector: 'zxing-scanner',\n  templateUrl: './zxing-scanner.component.html',\n  styleUrls: ['./zxing-scanner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\n\n  /**\n   * Supported Hints map.\n   */\n  private _hints: Map<DecodeHintType, any> | null;\n\n  /**\n   * The ZXing code reader.\n   */\n  private _codeReader: BrowserMultiFormatContinuousReader;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _device: MediaDeviceInfo;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _enabled: boolean;\n\n  /**\n   *\n   */\n  private _isAutostarting: boolean;\n\n  /**\n   * Has `navigator` access.\n   */\n  private hasNavigator: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isMediaDevicesSuported: boolean;\n\n  /**\n   * If the user-agent allowed the use of the camera or not.\n   */\n  private hasPermission: boolean | null;\n\n  /**\n   * Reference to the preview element, should be the `video` tag.\n   */\n  @ViewChild('preview', { static: true })\n  previewElemRef: ElementRef<HTMLVideoElement>;\n\n  /**\n   * Enable or disable autofocus of the camera (might have an impact on performance)\n   */\n  @Input()\n  autofocusEnabled: boolean;\n\n  /**\n   * Emits when and if the scanner is autostarted.\n   */\n  @Output()\n  autostarted: EventEmitter<void>;\n\n  /**\n   * True during autostart and false after. It will be null if won't autostart at all.\n   */\n  @Output()\n  autostarting: EventEmitter<boolean | null>;\n\n  /**\n   * If the scanner should autostart with the first available device.\n   */\n  @Input()\n  autostart: boolean;\n\n  /**\n   * How the preview element shoud be fit inside the :host container.\n   */\n  @Input()\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\n\n  /**\n   * Emitts events when the torch compatibility is changed.\n   */\n  @Output()\n  torchCompatible: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n   */\n  @Output()\n  scanSuccess: EventEmitter<string>;\n\n  /**\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n   */\n  @Output()\n  scanFailure: EventEmitter<Exception | undefined>;\n\n  /**\n   * Emitts events when a scan throws some error, will inject the error to the callback.\n   */\n  @Output()\n  scanError: EventEmitter<Error>;\n\n  /**\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n   */\n  @Output()\n  scanComplete: EventEmitter<Result>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasNotFound: EventEmitter<any>;\n\n  /**\n   * Emitts events when the users answers for permission.\n   */\n  @Output()\n  permissionResponse: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when has devices status is update.\n   */\n  @Output()\n  hasDevices: EventEmitter<boolean>;\n\n  /**\n   * Exposes the current code reader, so the user can use it's APIs.\n   */\n  get codeReader(): BrowserMultiFormatContinuousReader {\n    return this._codeReader;\n  }\n\n  /**\n   * User device input\n   */\n  @Input()\n  set device(device: MediaDeviceInfo | null) {\n\n    if (!device && device !== null) {\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\n    }\n\n    if (this.isCurrentDevice(device)) {\n      console.warn('Setting the same device is not allowed.');\n      return;\n    }\n\n    if (this.isAutostarting) {\n      // do not allow setting devices during auto-start, since it will set one and emit it.\n      console.warn('Avoid setting a device during auto-start.');\n      return;\n    }\n\n    if (!this.hasPermission) {\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\n      // this.permissionResponse\n      //   .pipe(\n      //     take(1),\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\n      //   )\n      //   .subscribe(() => this.device = device);\n      // return;\n    }\n\n    // in order to change the device the codeReader gotta be reseted\n    this._reset();\n\n    this._device = device;\n\n    // if enabled, starts scanning\n    if (this._enabled && device !== null) {\n      this.scanFromDevice(device.deviceId);\n    }\n  }\n\n  /**\n   * Emits when the current device is changed.\n   */\n  @Output()\n  deviceChange: EventEmitter<MediaDeviceInfo>;\n\n  /**\n   * User device acessor.\n   */\n  get device() {\n    return this._device;\n  }\n\n  /**\n   * Returns all the registered formats.\n   */\n  get formats(): BarcodeFormat[] {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  @Input()\n  set formats(input: BarcodeFormat[]) {\n\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\n\n    const hints = this.hints;\n\n    // updates the hints\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n\n    this.hints = hints;\n  }\n\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n\n  /**\n   * Does what it takes to set the hints.\n   */\n  set hints(hints: Map<DecodeHintType, any>) {\n\n    this._hints = hints;\n\n    // @note avoid restarting the code reader when possible\n\n    // new instance with new hints.\n    this.restart();\n  }\n\n  /**\n   *\n   */\n  set isAutostarting(state: boolean | null) {\n    this._isAutostarting = state;\n    this.autostarting.next(state);\n  }\n\n  /**\n   *\n   */\n  get isAutstarting(): boolean | null {\n    return this._isAutostarting;\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set torch(on: boolean) {\n    this.getCodeReader().setTorch(on);\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set enable(enabled: boolean) {\n\n    this._enabled = Boolean(enabled);\n\n    if (!this._enabled) {\n      this.reset();\n    } else if (this.device) {\n      this.scanFromDevice(this.device.deviceId);\n    }\n  }\n\n  /**\n   * Tells if the scanner is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder(): boolean {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  @Input()\n  set tryHarder(enable: boolean) {\n\n    const hints = this.hints;\n\n    if (enable) {\n      hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      hints.delete(DecodeHintType.TRY_HARDER);\n    }\n\n    this.hints = hints;\n  }\n\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    // instance based emitters\n    this.autostarted = new EventEmitter();\n    this.autostarting = new EventEmitter();\n    this.torchCompatible = new EventEmitter();\n    this.scanSuccess = new EventEmitter();\n    this.scanFailure = new EventEmitter();\n    this.scanError = new EventEmitter();\n    this.scanComplete = new EventEmitter();\n    this.camerasFound = new EventEmitter();\n    this.camerasNotFound = new EventEmitter();\n    this.permissionResponse = new EventEmitter(true);\n    this.hasDevices = new EventEmitter();\n    this.deviceChange = new EventEmitter();\n\n    this._device = null;\n    this._enabled = true;\n    this._hints = new Map<DecodeHintType, any>();\n    this.autofocusEnabled = true;\n    this.autostart = true;\n    this.formats = [BarcodeFormat.QR_CODE];\n\n    // computed data\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\n  }\n\n  /**\n   * Gets and registers all cammeras.\n   */\n  async askForPermission(): Promise<boolean> {\n\n    if (!this.hasNavigator) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    if (!this.isMediaDevicesSuported) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    let stream: MediaStream;\n    let permission: boolean;\n\n    try {\n      // Will try to ask for permission\n      stream = await this.getAnyVideoDevice();\n      permission = !!stream;\n    } catch (err) {\n      return this.handlePermissionException(err);\n    } finally {\n      this.terminateStream(stream);\n    }\n\n    this.setPermission(permission);\n\n    // Returns the permission\n    return permission;\n  }\n\n  /**\n   *\n   */\n  getAnyVideoDevice(): Promise<MediaStream> {\n    return navigator.mediaDevices.getUserMedia({ video: true });\n  }\n\n  /**\n   * Terminates a stream and it's tracks.\n   */\n  private terminateStream(stream: MediaStream) {\n\n    if (stream) {\n      stream.getTracks().forEach(t => t.stop());\n    }\n\n    stream = undefined;\n  }\n\n  /**\n   * Initializes the component without starting the scanner.\n   */\n  private initAutostartOff(): void {\n\n    // do not ask for permission when autostart is off\n    this.isAutostarting = null;\n\n    // just update devices information\n    this.updateVideoInputDevices();\n  }\n\n  /**\n   * Initializes the component and starts the scanner.\n   * Permissions are asked to accomplish that.\n   */\n  private async initAutostartOn(): Promise<void> {\n\n    this.isAutostarting = true;\n\n    let hasPermission: boolean;\n\n    try {\n      // Asks for permission before enumerating devices so it can get all the device's info\n      hasPermission = await this.askForPermission();\n    } catch (e) {\n      console.error('Exception occurred while asking for permission:', e);\n      return;\n    }\n\n    // from this point, things gonna need permissions\n    if (hasPermission) {\n      const devices = await this.updateVideoInputDevices();\n      this.autostartScanner([...devices]);\n    }\n  }\n\n  /**\n   * Checks if the given device is the current defined one.\n   */\n  isCurrentDevice(device: MediaDeviceInfo) {\n    return this.device && device && device.deviceId === this.device.deviceId;\n  }\n\n  /**\n   * Executed after the view initialization.\n   */\n  ngAfterViewInit(): void {\n\n    // makes torch availability information available to user\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\n\n    if (!this.autostart) {\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\n\n      // does the necessary configuration without autostarting\n      this.initAutostartOff();\n\n      return;\n    }\n\n    // configurates the component and starts the scanner\n    this.initAutostartOn();\n  }\n\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy(): void {\n    this.reset();\n  }\n\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  restart(): void {\n\n    const prevDevice = this._reset();\n\n    if (!prevDevice) {\n      return;\n    }\n\n    // @note apenas necessario por enquanto causa da Torch\n    this._codeReader = undefined;\n    this.device = prevDevice;\n  }\n\n  /**\n   * Discovers and updates known video input devices.\n   */\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\n\n    // permissions aren't needed to get devices, but to access them and their info\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\n    const hasDevices = devices && devices.length > 0;\n\n    // stores discovered devices and updates information\n    this.hasDevices.next(hasDevices);\n    this.camerasFound.next([...devices]);\n\n    if (!hasDevices) {\n      this.camerasNotFound.next();\n    }\n\n    return devices;\n  }\n\n  /**\n   * Starts the scanner with the back camera otherwise take the last\n   * available device.\n   */\n  private autostartScanner(devices: MediaDeviceInfo[]) {\n\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\n\n    // select the rear camera by default, otherwise take the last camera.\n    const device = devices.find(matcher) || devices.pop();\n\n    if (!device) {\n      throw new Error('Impossible to autostart, no input devices available.');\n    }\n\n    this.device = device;\n    // @note when listening to this change, callback code will sometimes run before the previous line.\n    this.deviceChange.emit(device);\n\n    this.isAutostarting = false;\n    this.autostarted.next();\n  }\n\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanSuccess(result: Result): void {\n    this.scanSuccess.next(result.getText());\n  }\n\n  /**\n   * Dispatches the scan failure event.\n   */\n  private dispatchScanFailure(reason?: Exception): void {\n    this.scanFailure.next(reason);\n  }\n\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param error the error thing.\n   */\n  private dispatchScanError(error: any): void {\n    this.scanError.next(error);\n  }\n\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanComplete(result: Result): void {\n    this.scanComplete.next(result);\n  }\n\n  /**\n   * Returns the filtered permission.\n   */\n  private handlePermissionException(err: DOMException): boolean {\n\n    // failed to grant permission to video input\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\n\n    let permission: boolean;\n\n    switch (err.name) {\n\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this.hasDevices.next(null);\n        break;\n\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this.hasDevices.next(true);\n        break;\n\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this.hasDevices.next(undefined;\n        break;\n\n    }\n\n    this.setPermission(permission);\n\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n\n    return permission;\n  }\n\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\n    return typeof format === 'string'\n      ? BarcodeFormat[format.trim().toUpperCase()]\n      : format;\n  }\n\n  /**\n   * Retorna um code reader, cria um se nenhume existe.\n   */\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\n\n    if (!this._codeReader) {\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints);\n    }\n\n    return this._codeReader;\n  }\n\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  private scanFromDevice(deviceId: string): void {\n\n    const videoElement = this.previewElemRef.nativeElement;\n\n    const codeReader = this.getCodeReader();\n\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\n\n    if (!decodingStream) {\n      throw new Error('Undefined decoding stream, aborting.');\n    }\n\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\n    const error = (err: any) => this._onDecodeError(err);\n    const complete = () => { this.reset(); console.log('completed'); };\n\n    decodingStream.subscribe(next, error, complete);\n  }\n\n  /**\n   * Handles decode errors.\n   */\n  private _onDecodeError(err: any) {\n    this.dispatchScanError(err);\n    this.reset();\n  }\n\n  /**\n   * Handles decode results.\n   */\n  private _onDecodeResult(result: Result, error: Exception): void {\n\n    if (result) {\n      this.dispatchScanSuccess(result);\n    } else {\n      this.dispatchScanFailure(error);\n    }\n\n    this.dispatchScanComplete(result);\n  }\n\n  /**\n   * Stops the code reader and returns the previous selected device.\n   */\n  private _reset(): MediaDeviceInfo {\n\n    if (!this._codeReader) {\n      return;\n    }\n\n    const device = this.device;\n    // do not set this.device inside this method, it would create a recursive loop\n    this._device = null;\n\n    this._codeReader.reset();\n\n    return device;\n  }\n\n  /**\n   * Resets the scanner and emits device change.\n   */\n  public reset(): void {\n    this._reset();\n    this.deviceChange.emit(null);\n  }\n\n  /**\n   * Sets the permission value and emmits the event.\n   */\n  private setPermission(hasPermission: boolean | null): void {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n  }\n\n}\n","<video #preview [style.object-fit]=\"previewFitMode\">\n  <p>\n    Your browser does not support this feature, please try to upgrade it.\n  </p>\n  <p>\n    Seu navegador não suporta este recurso, por favor tente atualizá-lo.\n  </p>\n</video>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ZXingScannerComponent],\n  exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule { }\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from './lib/zxing-scanner.module';\nexport * from './lib/zxing-scanner.component';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-info-dialog',\n  templateUrl: './app-info-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppInfoDialogComponent {\n\n  hasDevices: boolean;\n  hasPermission: boolean;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\n  ) {\n    this.hasDevices = data.hasDevices;\n    this.hasPermission = data.hasPermission;\n  }\n\n}\n","<app-info [hasDevices]=\"hasDevices\" [hasPermission]=\"hasPermission\"></app-info>\n\n<mat-dialog-actions>\n  <button mat-flat-button color=\"primary\" mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import { Component, Input, VERSION, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './app-info.component.html',\n  styleUrls: ['./app-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppInfoComponent {\n\n  ngVersion = VERSION.full;\n\n  @Input()\n  hasDevices: boolean;\n\n  @Input()\n  hasPermission: boolean;\n\n  stateToEmoji(state: boolean): string {\n\n    const states = {\n      // not checked\n      undefined: '❔',\n      // failed to check\n      null: '⭕',\n      // success\n      true: '✔',\n      // can't touch that\n      false: '❌'\n    };\n\n    return states['' + state];\n  }\n}\n","<table class=\"table-scanner-state\">\n  <thead>\n    <tr>\n      <th>Status</th>\n      <th>Property</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>{{ stateToEmoji(hasDevices) }}</code></td>\n      <td>Devices</td>\n    </tr>\n    <tr>\n      <td><code>{{ stateToEmoji(hasPermission) }}</code></td>\n      <td>Permissions</td>\n    </tr>\n  </tbody>\n</table>\n\n<p matLine class=\"ng-version\">Angular version: {{ ngVersion }}</p>\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ZXingScannerModule } from './public_api';\n\nconst UI_MODULES = [\n\n  // Angular\n  BrowserAnimationsModule,\n  FormsModule,\n\n  // Material\n  MatDialogModule,\n  MatListModule,\n  MatTooltipModule,\n  MatButtonModule,\n  MatFormFieldModule,\n  MatSelectModule,\n  MatInputModule,\n  MatMenuModule,\n  MatIconModule,\n\n  // Local\n  ZXingScannerModule,\n\n];\n\n@NgModule({ exports: UI_MODULES })\nexport class AppUiModule { }\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BarcodeFormat } from '@zxing/library';\nimport { BehaviorSubject } from 'rxjs';\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  availableDevices: MediaDeviceInfo[];\n  currentDevice: MediaDeviceInfo = null;\n\n  formatsEnabled: BarcodeFormat[] = [\n    BarcodeFormat.CODE_39,\n    BarcodeFormat.CODE_93,\n    BarcodeFormat.CODE_128,\n    BarcodeFormat.EAN_8,\n    BarcodeFormat.EAN_13,\n    BarcodeFormat.UPC_A,\n    BarcodeFormat.UPC_E,\n    BarcodeFormat.QR_CODE,\n  ];\n\n  hasDevices: boolean;\n  hasPermission: boolean;\n\n  qrResultString: string;\n\n  torchEnabled = false;\n  torchAvailable$ = new BehaviorSubject<boolean>(false);\n  tryHarder = false;\n\n  constructor(private readonly _dialog: MatDialog) { }\n\n  clearResult(): void {\n    this.qrResultString = null;\n  }\n\n  onCamerasFound(devices: MediaDeviceInfo[]): void {\n    this.availableDevices = devices;\n    this.hasDevices = Boolean(devices && devices.length);\n  }\n\n  onCodeResult(resultString: string) {\n    this.qrResultString = resultString;\n  }\n\n  onDeviceSelectChange(selected: string) {\n    const device = this.availableDevices.find(x => x.deviceId === selected);\n    this.currentDevice = device || null;\n  }\n\n  openFormatsDialog() {\n    const data = {\n      formatsEnabled: this.formatsEnabled,\n    };\n\n    this._dialog\n      .open(FormatsDialogComponent, { data })\n      .afterClosed()\n      .subscribe(x => { if (x) { this.formatsEnabled = x; } });\n  }\n\n  onHasPermission(has: boolean) {\n    this.hasPermission = has;\n  }\n\n  openInfoDialog() {\n    const data = {\n      hasDevices: this.hasDevices,\n      hasPermission: this.hasPermission,\n    };\n\n    this._dialog.open(AppInfoDialogComponent, { data });\n  }\n\n  onTorchCompatible(isCompatible: boolean): void {\n    this.torchAvailable$.next(isCompatible || false);\n  }\n\n  toggleTorch(): void {\n    this.torchEnabled = !this.torchEnabled;\n  }\n\n  toggleTryHarder(): void {\n    this.tryHarder = !this.tryHarder;\n  }\n}\n","<div class=\"scanner-shell\" [hidden]=\"!hasDevices\">\n\n  <mat-menu #appMenu=\"matMenu\">\n    <mat-selection-list>\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTryHarder()\" [selected]=\"tryHarder\">\n        Enable Try-harder\n      </mat-list-option>\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTorch()\" [selected]=\"torchEnabled\"\n        *ngIf=\"torchAvailable$ | async\">\n        Enable Torch\n      </mat-list-option>\n    </mat-selection-list>\n    <mat-divider></mat-divider>\n    <button mat-menu-item (click)=\"openFormatsDialog()\">Barcode formats</button>\n    <button mat-menu-item (click)=\"openInfoDialog()\">App info</button>\n  </mat-menu>\n\n  <header>\n    <mat-form-field appearance=\"fill\">\n      <select matNativeControl matInput (change)=\"onDeviceSelectChange($event.target.value)\">\n        <option value=\"\" [selected]=\"!currentDevice\">No Device Selected</option>\n        <option *ngFor=\"let device of availableDevices\" [value]=\"device.deviceId\"\n          [selected]=\"currentDevice && device.deviceId === currentDevice.deviceId\">{{device.label}}</option>\n      </select>\n    </mat-form-field>\n    <button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n      <mat-icon>more_vert</mat-icon>\n    </button>\n  </header>\n\n  <zxing-scanner [torch]=\"torchEnabled\" [(device)]=\"currentDevice\" (scanSuccess)=\"onCodeResult($event)\"\n    [formats]=\"formatsEnabled\" [tryHarder]=\"tryHarder\" (permissionResponse)=\"onHasPermission($event)\"\n    (camerasFound)=\"onCamerasFound($event)\" (torchCompatible)=\"onTorchCompatible($event)\"></zxing-scanner>\n\n  <section class=\"results\" *ngIf=\"qrResultString\">\n    <div>\n      <small>Result</small>\n      <strong>{{ qrResultString }}</strong>\n    </div>\n    <button mat-icon-button (click)=\"clearResult()\">&times;</button>\n  </section>\n\n</div>\n\n<ng-container *ngIf=\"hasPermission === undefined\">\n\n  <h2>Waiting for permissions.</h2>\n\n  <blockquote>\n    If your device does not has cameras, no permissions will be asked.\n  </blockquote>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasPermission === false\">\n\n  <h2>You denied the camera permission, we can't scan anything without it. 😪</h2>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasDevices === undefined\">\n\n  <h2>Couldn't check for devices.</h2>\n\n  <blockquote>\n    This may be caused by some security error.\n  </blockquote>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasDevices === false\">\n\n  <h2>No devices were found.</h2>\n\n  <blockquote>\n    I believe your device has no media devices attached to.\n  </blockquote>\n\n</ng-container>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\nimport { AppInfoComponent } from './app-info/app-info.component';\nimport { AppUiModule } from './app-ui.module';\nimport { AppComponent } from './app.component';\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\n\n\n@NgModule({\n  imports: [\n\n    // Angular\n    BrowserModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n\n    // Local\n    AppUiModule,\n\n  ],\n  declarations: [AppComponent, FormatsDialogComponent, AppInfoComponent, AppInfoDialogComponent],\n  bootstrap: [AppComponent],\n  entryComponents: [FormatsDialogComponent, AppInfoDialogComponent]\n})\nexport class AppModule { }\n","import { BarcodeFormat } from '@zxing/library';\n\nexport const formatsAvailable = [\n  BarcodeFormat.CODE_39,\n  BarcodeFormat.CODE_93,\n  BarcodeFormat.CODE_128,\n  BarcodeFormat.EAN_8,\n  BarcodeFormat.EAN_13,\n  BarcodeFormat.UPC_A,\n  BarcodeFormat.UPC_E,\n  BarcodeFormat.QR_CODE,\n];\n\nexport const formatNames = [\n  'Aztec 2D barcode format.',\n  'CODABAR 1D format.',\n  'Code 39 1D format.',\n  'Code 93 1D format.',\n  'Code 128 1D format.',\n  'Data Matrix 2D barcode format.',\n  'EAN-8 1D format.',\n  'EAN-13 1D format.',\n  'ITF (Interleaved Two of Five) 1D format.',\n  'MaxiCode 2D barcode format.',\n  'PDF417 format.',\n  'QR Code 2D barcode format.',\n  'RSS 14',\n  'RSS EXPANDED',\n  'UPC-A 1D format.',\n  'UPC-E 1D format.',\n  'UPC/EAN extension format. Not a stand-alone format.',\n];\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSelectionListChange } from '@angular/material/list';\nimport { BarcodeFormat } from '@zxing/library';\nimport { formatNames, formatsAvailable } from '../barcode-formats';\n\n@Component({\n  selector: 'app-formats-dialog',\n  templateUrl: './formats-dialog.component.html',\n  styleUrls: ['./formats-dialog.component.scss']\n})\nexport class FormatsDialogComponent {\n\n  formatsAvailable = formatsAvailable;\n\n  formatsEnabled: BarcodeFormat[];\n\n  readonly formatNames = formatNames;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\n    private readonly _dialogRef: MatDialogRef<FormatsDialogComponent>,\n  ) {\n    this.formatsEnabled = data.formatsEnabled || [];\n  }\n\n  close() {\n    this._dialogRef.close(this.formatsEnabled);\n  }\n\n  isEnabled(format: BarcodeFormat) {\n    return this.formatsEnabled.find(x => x === format);\n  }\n\n  onSelectionChange(event: MatSelectionListChange) {\n    this.formatsEnabled = event.source.selectedOptions.selected.map(selected => selected.value);\n  }\n}\n","<header>\n  Available formats:\n</header>\n\n<mat-selection-list #selectedFormats (selectionChange)=\"onSelectionChange($event)\">\n  <mat-list-option *ngFor=\"let format of formatsAvailable\" checkboxPosition=\"start\" [selected]=\"isEnabled(format)\" [value]=\"format\">\n    {{ formatNames[format] }}\n  </mat-list-option>\n</mat-selection-list>\n\n<mat-dialog-actions>\n  <button mat-flat-button color=\"primary\" (click)=\"close()\">Done</button>\n</mat-dialog-actions>\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from '../../../zxing-scanner/src/public_api';\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}