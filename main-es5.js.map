{"version":3,"sources":["webpack:///zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","webpack:///zxing-scanner/src/lib/zxing-scanner.component.ts","webpack:///zxing-scanner/src/lib/zxing-scanner.component.html","webpack:///zxing-scanner/src/lib/zxing-scanner.module.ts","webpack:///zxing-scanner/src/public_api.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-info-dialog/app-info-dialog.component.ts","webpack:///src/app/app-info-dialog/app-info-dialog.component.html","webpack:///src/app/app-info/app-info.component.ts","webpack:///src/app/app-info/app-info.component.html","webpack:///src/app/app-ui.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/barcode-formats.ts","webpack:///src/app/formats-dialog/formats-dialog.component.ts","webpack:///src/app/formats-dialog/formats-dialog.component.html","webpack:///src/app/public_api.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["BrowserMultiFormatContinuousReader","_isTorchAvailable","undefined","deviceId","videoSource","reset","navigator","scan$","getStreamForDevice","then","stream","attachStreamToVideoAndCheckTorch","videoElement","decodeOnSubject","timeBetweenScansMillis","e","error","_setScanStream","asObservable","constraints","getUserMediaConstraints","mediaDevices","getUserMedia","video","facingMode","exact","on","value","tracks","getVideoTracks","applyTorchOnTracks","restart","updateTorchCompatibility","attachStreamToVideo","track","isTorchCompatible","next","compatible","imageCapture","ImageCapture","getPhotoCapabilities","capabilities","fillLightMode","length","state","forEach","applyConstraints","advanced","torch","_cleanScanStream","scanStream","isStopped","complete","delay","result","decode","timeout","setTimeout","continuousDecodeFromInputVideoDevice","ZXingScannerComponent","previewFitMode","autostarted","autostarting","torchCompatible","scanSuccess","scanFailure","scanError","scanComplete","camerasFound","camerasNotFound","permissionResponse","hasDevices","deviceChange","_device","_enabled","_hints","Map","autofocusEnabled","autostart","formats","QR_CODE","hasNavigator","isMediaDevicesSuported","console","setPermission","hasPermission","getAnyVideoDevice","permission","handlePermissionException","terminateStream","getTracks","t","stop","isAutostarting","updateVideoInputDevices","askForPermission","devices","autostartScanner","device","getCodeReader","isTorchAvailable","subscribe","x","emit","warn","initAutostartOff","initAutostartOn","prevDevice","_reset","_codeReader","listVideoInputDevices","matcher","label","test","find","pop","Error","getText","reason","err","name","message","format","trim","toUpperCase","hints","previewElemRef","nativeElement","codeReader","decodingStream","_onDecodeResult","_onDecodeError","log","dispatchScanError","dispatchScanSuccess","dispatchScanFailure","dispatchScanComplete","isCurrentDevice","scanFromDevice","get","POSSIBLE_FORMATS","input","map","f","getBarcodeFormatOrFail","set","_isAutostarting","setTorch","enabled","Boolean","TRY_HARDER","enable","delete","selector","templateUrl","styleUrls","changeDetection","OnPush","static","ZXingScannerModule","imports","declarations","exports","webpackEmptyAsyncContext","req","Promise","resolve","code","keys","module","id","AppInfoDialogComponent","data","AppInfoComponent","ngVersion","full","states","null","true","false","UI_MODULES","AppUiModule","AppComponent","_dialog","currentDevice","formatsEnabled","CODE_39","CODE_93","CODE_128","EAN_8","EAN_13","UPC_A","UPC_E","torchEnabled","torchAvailable$","tryHarder","qrResultString","availableDevices","resultString","selected","open","afterClosed","has","isCompatible","toggleTryHarder","openFormatsDialog","openInfoDialog","onDeviceSelectChange","onCodeResult","onHasPermission","onCamerasFound","onTorchCompatible","AppModule","register","production","bootstrap","entryComponents","formatsAvailable","formatNames","FormatsDialogComponent","_dialogRef","close","event","source","selectedOptions","onSelectionChange","environment","bootstrapModule","catch"],"mappings":"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","file":"main-es5.js","sourcesContent":["/// <reference path=\"./image-capture.d.ts\" />\n\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ResultAndError } from './ResultAndError';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\n\n  /**\n   * Exposes _tochAvailable .\n   */\n  public get isTorchAvailable(): Observable<boolean> {\n    return this._isTorchAvailable.asObservable();\n  }\n\n  /**\n   * Says if there's a torch available for the current device.\n   */\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\n\n  /**\n   * The device id of the current media device.\n   */\n  private deviceId: string;\n\n  /**\n   * If there's some scan stream open, it shal be here.\n   */\n  private scanStream: BehaviorSubject<ResultAndError>;\n\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param callbackFn The callback to be executed after every scan attempt\n   * @param deviceId The device's to be used Id\n   * @param videoSource A new video element\n   */\n  public continuousDecodeFromInputVideoDevice(\n    deviceId?: string,\n    videoSource?: HTMLVideoElement\n  ): Observable<ResultAndError> {\n\n    this.reset();\n\n    // Keeps the deviceId between scanner resets.\n    if (typeof deviceId !== 'undefined') {\n      this.deviceId = deviceId;\n    }\n\n    if (typeof navigator === 'undefined') {\n      return;\n    }\n\n    const scan$ = new BehaviorSubject<ResultAndError>({});\n\n    try {\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\n      this.getStreamForDevice({ deviceId })\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\n    } catch (e) {\n      scan$.error(e);\n    }\n\n    this._setScanStream(scan$);\n\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\n\n    return scan$.asObservable();\n  }\n\n  /**\n   * Gets the media stream for certain device.\n   * Falls back to any available device if no `deviceId` is defined.\n   */\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\n    const constraints = this.getUserMediaConstraints(deviceId);\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    return stream;\n  }\n\n  /**\n   * Creates media steram constraints for certain `deviceId`.\n   * Falls back to any environment available device if no `deviceId` is defined.\n   */\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\n\n    const video = typeof deviceId === 'undefined'\n      ? { facingMode: { exact: 'environment' } }\n      : { deviceId: { exact: deviceId } };\n\n    const constraints: MediaStreamConstraints = { video };\n\n    return constraints;\n  }\n\n  /**\n   * Enables and disables the device torch.\n   */\n  public setTorch(on: boolean): void {\n\n    if (!this._isTorchAvailable.value) {\n      // compatibility not checked yet\n      return;\n    }\n\n    const tracks = this.getVideoTracks(this.stream);\n\n    if (on) {\n      this.applyTorchOnTracks(tracks, true);\n    } else {\n      this.applyTorchOnTracks(tracks, false);\n      // @todo check possibility to disable torch without restart\n      this.restart();\n    }\n  }\n\n  /**\n   * Update the torch compatibility state and attachs the stream to the preview element.\n   */\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\n    this.updateTorchCompatibility(stream);\n    return this.attachStreamToVideo(stream, videoSource);\n  }\n\n  /**\n   * Checks if the stream supports torch control.\n   *\n   * @param stream The media stream used to check.\n   */\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\n\n    const tracks = this.getVideoTracks(stream);\n\n    for (const track of tracks) {\n      if (await this.isTorchCompatible(track)) {\n        this._isTorchAvailable.next(true);\n        break;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param stream The video stream where the tracks gonna be extracted from.\n   */\n  private getVideoTracks(stream: MediaStream) {\n    let tracks = [];\n    try {\n      tracks = stream.getVideoTracks();\n    }\n    finally {\n      return tracks || [];\n    }\n  }\n\n  /**\n   *\n   * @param track The media stream track that will be checked for compatibility.\n   */\n  private async isTorchCompatible(track: MediaStreamTrack) {\n\n    let compatible = false;\n\n    try {\n      const imageCapture = new ImageCapture(track);\n      const capabilities = await imageCapture.getPhotoCapabilities();\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\n    }\n    finally {\n      return compatible;\n    }\n  }\n\n  /**\n   * Apply the torch setting in all received tracks.\n   */\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\n    tracks.forEach(track => track.applyConstraints({\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\n    }));\n  }\n\n  /**\n   * Correctly sets a new scanStream value.\n   */\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\n    // cleans old stream\n    this._cleanScanStream();\n    // sets new stream\n    this.scanStream = scan$;\n  }\n\n  /**\n   * Cleans any old scan stream value.\n   */\n  private _cleanScanStream(): void {\n\n    if (this.scanStream && !this.scanStream.isStopped) {\n      this.scanStream.complete();\n    }\n\n    this.scanStream = null;\n  }\n\n  /**\n   * Decodes values in a stream with delays between scans.\n   *\n   * @param scan$ The subject to receive the values.\n   * @param videoElement The video element the decode will be applied.\n   * @param delay The delay between decode results.\n   */\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\n\n    // stops loop\n    if (scan$.isStopped) {\n      return;\n    }\n\n    let result: Result;\n\n    try {\n      result = this.decode(videoElement);\n      scan$.next({ result });\n    } catch (error) {\n      // stream cannot stop on fails.\n      if (\n        !error ||\n        // scan Failure - found nothing, no error\n        error instanceof NotFoundException ||\n        // scan Error - found the QR but got error on decoding\n        error instanceof ChecksumException ||\n        error instanceof FormatException\n      ) {\n        scan$.next({ error });\n      } else {\n        scan$.error(error);\n      }\n    } finally {\n      const timeout = !result ? 0 : delay;\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\n    }\n  }\n\n  /**\n   * Restarts the scanner.\n   */\n  private restart(): Observable<ResultAndError> {\n    // reset\n    // start\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\n  }\n\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport {\n  ArgumentException,\n  BarcodeFormat,\n  DecodeHintType,\n  Exception,\n  Result\n} from '@zxing/library';\n\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\nimport { ResultAndError } from './ResultAndError';\n\n@Component({\n  selector: 'zxing-scanner',\n  templateUrl: './zxing-scanner.component.html',\n  styleUrls: ['./zxing-scanner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\n\n  /**\n   * Supported Hints map.\n   */\n  private _hints: Map<DecodeHintType, any> | null;\n\n  /**\n   * The ZXing code reader.\n   */\n  private _codeReader: BrowserMultiFormatContinuousReader;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _device: MediaDeviceInfo;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _enabled: boolean;\n\n  /**\n   *\n   */\n  private _isAutostarting: boolean;\n\n  /**\n   * Has `navigator` access.\n   */\n  private hasNavigator: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isMediaDevicesSuported: boolean;\n\n  /**\n   * If the user-agent allowed the use of the camera or not.\n   */\n  private hasPermission: boolean | null;\n\n  /**\n   * Reference to the preview element, should be the `video` tag.\n   */\n  @ViewChild('preview', { static: true })\n  previewElemRef: ElementRef<HTMLVideoElement>;\n\n  /**\n   * Enable or disable autofocus of the camera (might have an impact on performance)\n   */\n  @Input()\n  autofocusEnabled: boolean;\n\n  /**\n   * Emits when and if the scanner is autostarted.\n   */\n  @Output()\n  autostarted: EventEmitter<void>;\n\n  /**\n   * True during autostart and false after. It will be null if won't autostart at all.\n   */\n  @Output()\n  autostarting: EventEmitter<boolean | null>;\n\n  /**\n   * If the scanner should autostart with the first available device.\n   */\n  @Input()\n  autostart: boolean;\n\n  /**\n   * How the preview element shoud be fit inside the :host container.\n   */\n  @Input()\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\n\n  /**\n   * Emitts events when the torch compatibility is changed.\n   */\n  @Output()\n  torchCompatible: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n   */\n  @Output()\n  scanSuccess: EventEmitter<string>;\n\n  /**\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n   */\n  @Output()\n  scanFailure: EventEmitter<Exception | undefined>;\n\n  /**\n   * Emitts events when a scan throws some error, will inject the error to the callback.\n   */\n  @Output()\n  scanError: EventEmitter<Error>;\n\n  /**\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n   */\n  @Output()\n  scanComplete: EventEmitter<Result>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasNotFound: EventEmitter<any>;\n\n  /**\n   * Emitts events when the users answers for permission.\n   */\n  @Output()\n  permissionResponse: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when has devices status is update.\n   */\n  @Output()\n  hasDevices: EventEmitter<boolean>;\n\n  /**\n   * Exposes the current code reader, so the user can use it's APIs.\n   */\n  get codeReader(): BrowserMultiFormatContinuousReader {\n    return this._codeReader;\n  }\n\n  /**\n   * User device input\n   */\n  @Input()\n  set device(device: MediaDeviceInfo | null) {\n\n    if (!device && device !== null) {\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\n    }\n\n    if (this.isCurrentDevice(device)) {\n      console.warn('Setting the same device is not allowed.');\n      return;\n    }\n\n    if (this.isAutostarting) {\n      // do not allow setting devices during auto-start, since it will set one and emit it.\n      console.warn('Avoid setting a device during auto-start.');\n      return;\n    }\n\n    if (!this.hasPermission) {\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\n      // this.permissionResponse\n      //   .pipe(\n      //     take(1),\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\n      //   )\n      //   .subscribe(() => this.device = device);\n      // return;\n    }\n\n    // in order to change the device the codeReader gotta be reseted\n    this._reset();\n\n    this._device = device;\n\n    // if enabled, starts scanning\n    if (this._enabled && device !== null) {\n      this.scanFromDevice(device.deviceId);\n    }\n  }\n\n  /**\n   * Emits when the current device is changed.\n   */\n  @Output()\n  deviceChange: EventEmitter<MediaDeviceInfo>;\n\n  /**\n   * User device acessor.\n   */\n  get device() {\n    return this._device;\n  }\n\n  /**\n   * Returns all the registered formats.\n   */\n  get formats(): BarcodeFormat[] {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  @Input()\n  set formats(input: BarcodeFormat[]) {\n\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\n\n    const hints = this.hints;\n\n    // updates the hints\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n\n    this.hints = hints;\n  }\n\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n\n  /**\n   * Does what it takes to set the hints.\n   */\n  set hints(hints: Map<DecodeHintType, any>) {\n\n    this._hints = hints;\n\n    // @note avoid restarting the code reader when possible\n\n    // new instance with new hints.\n    this.restart();\n  }\n\n  /**\n   *\n   */\n  set isAutostarting(state: boolean | null) {\n    this._isAutostarting = state;\n    this.autostarting.next(state);\n  }\n\n  /**\n   *\n   */\n  get isAutstarting(): boolean | null {\n    return this._isAutostarting;\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set torch(on: boolean) {\n    this.getCodeReader().setTorch(on);\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set enable(enabled: boolean) {\n\n    this._enabled = Boolean(enabled);\n\n    if (!this._enabled) {\n      this.reset();\n    } else if (this.device) {\n      this.scanFromDevice(this.device.deviceId);\n    }\n  }\n\n  /**\n   * Tells if the scanner is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder(): boolean {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  @Input()\n  set tryHarder(enable: boolean) {\n\n    const hints = this.hints;\n\n    if (enable) {\n      hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      hints.delete(DecodeHintType.TRY_HARDER);\n    }\n\n    this.hints = hints;\n  }\n\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    // instance based emitters\n    this.autostarted = new EventEmitter();\n    this.autostarting = new EventEmitter();\n    this.torchCompatible = new EventEmitter();\n    this.scanSuccess = new EventEmitter();\n    this.scanFailure = new EventEmitter();\n    this.scanError = new EventEmitter();\n    this.scanComplete = new EventEmitter();\n    this.camerasFound = new EventEmitter();\n    this.camerasNotFound = new EventEmitter();\n    this.permissionResponse = new EventEmitter(true);\n    this.hasDevices = new EventEmitter();\n    this.deviceChange = new EventEmitter();\n\n    this._device = null;\n    this._enabled = true;\n    this._hints = new Map<DecodeHintType, any>();\n    this.autofocusEnabled = true;\n    this.autostart = true;\n    this.formats = [BarcodeFormat.QR_CODE];\n\n    // computed data\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\n  }\n\n  /**\n   * Gets and registers all cammeras.\n   */\n  async askForPermission(): Promise<boolean> {\n\n    if (!this.hasNavigator) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    if (!this.isMediaDevicesSuported) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    let stream: MediaStream;\n    let permission: boolean;\n\n    try {\n      // Will try to ask for permission\n      stream = await this.getAnyVideoDevice();\n      permission = !!stream;\n    } catch (err) {\n      return this.handlePermissionException(err);\n    } finally {\n      this.terminateStream(stream);\n    }\n\n    this.setPermission(permission);\n\n    // Returns the permission\n    return permission;\n  }\n\n  /**\n   *\n   */\n  getAnyVideoDevice(): Promise<MediaStream> {\n    return navigator.mediaDevices.getUserMedia({ video: true });\n  }\n\n  /**\n   * Terminates a stream and it's tracks.\n   */\n  private terminateStream(stream: MediaStream) {\n\n    if (stream) {\n      stream.getTracks().forEach(t => t.stop());\n    }\n\n    stream = undefined;\n  }\n\n  /**\n   * Initializes the component without starting the scanner.\n   */\n  private initAutostartOff(): void {\n\n    // do not ask for permission when autostart is off\n    this.isAutostarting = null;\n\n    // just update devices information\n    this.updateVideoInputDevices();\n  }\n\n  /**\n   * Initializes the component and starts the scanner.\n   * Permissions are asked to accomplish that.\n   */\n  private async initAutostartOn(): Promise<void> {\n\n    this.isAutostarting = true;\n\n    let hasPermission: boolean;\n\n    try {\n      // Asks for permission before enumerating devices so it can get all the device's info\n      hasPermission = await this.askForPermission();\n    } catch (e) {\n      console.error('Exception occurred while asking for permission:', e);\n      return;\n    }\n\n    // from this point, things gonna need permissions\n    if (hasPermission) {\n      const devices = await this.updateVideoInputDevices();\n      this.autostartScanner([...devices]);\n    }\n  }\n\n  /**\n   * Checks if the given device is the current defined one.\n   */\n  isCurrentDevice(device: MediaDeviceInfo) {\n    return this.device && device && device.deviceId === this.device.deviceId;\n  }\n\n  /**\n   * Executed after the view initialization.\n   */\n  ngAfterViewInit(): void {\n\n    // makes torch availability information available to user\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\n\n    if (!this.autostart) {\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\n\n      // does the necessary configuration without autostarting\n      this.initAutostartOff();\n\n      return;\n    }\n\n    // configurates the component and starts the scanner\n    this.initAutostartOn();\n  }\n\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy(): void {\n    this.reset();\n  }\n\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  restart(): void {\n\n    const prevDevice = this._reset();\n\n    if (!prevDevice) {\n      return;\n    }\n\n    // @note apenas necessario por enquanto causa da Torch\n    this._codeReader = undefined;\n    this.device = prevDevice;\n  }\n\n  /**\n   * Discovers and updates known video input devices.\n   */\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\n\n    // permissions aren't needed to get devices, but to access them and their info\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\n    const hasDevices = devices && devices.length > 0;\n\n    // stores discovered devices and updates information\n    this.hasDevices.next(hasDevices);\n    this.camerasFound.next([...devices]);\n\n    if (!hasDevices) {\n      this.camerasNotFound.next();\n    }\n\n    return devices;\n  }\n\n  /**\n   * Starts the scanner with the back camera otherwise take the last\n   * available device.\n   */\n  private autostartScanner(devices: MediaDeviceInfo[]) {\n\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\n\n    // select the rear camera by default, otherwise take the last camera.\n    const device = devices.find(matcher) || devices.pop();\n\n    if (!device) {\n      throw new Error('Impossible to autostart, no input devices available.');\n    }\n\n    this.device = device;\n    // @note when listening to this change, callback code will sometimes run before the previous line.\n    this.deviceChange.emit(device);\n\n    this.isAutostarting = false;\n    this.autostarted.next();\n  }\n\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanSuccess(result: Result): void {\n    this.scanSuccess.next(result.getText());\n  }\n\n  /**\n   * Dispatches the scan failure event.\n   */\n  private dispatchScanFailure(reason?: Exception): void {\n    this.scanFailure.next(reason);\n  }\n\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param error the error thing.\n   */\n  private dispatchScanError(error: any): void {\n    this.scanError.next(error);\n  }\n\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanComplete(result: Result): void {\n    this.scanComplete.next(result);\n  }\n\n  /**\n   * Returns the filtered permission.\n   */\n  private handlePermissionException(err: DOMException): boolean {\n\n    // failed to grant permission to video input\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\n\n    let permission: boolean;\n\n    switch (err.name) {\n\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this.hasDevices.next(null);\n        break;\n\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this.hasDevices.next(true);\n        break;\n\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this.hasDevices.next(undefined;\n        break;\n\n    }\n\n    this.setPermission(permission);\n\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n\n    return permission;\n  }\n\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\n    return typeof format === 'string'\n      ? BarcodeFormat[format.trim().toUpperCase()]\n      : format;\n  }\n\n  /**\n   * Retorna um code reader, cria um se nenhume existe.\n   */\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\n\n    if (!this._codeReader) {\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints);\n    }\n\n    return this._codeReader;\n  }\n\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  private scanFromDevice(deviceId: string): void {\n\n    const videoElement = this.previewElemRef.nativeElement;\n\n    const codeReader = this.getCodeReader();\n\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\n\n    if (!decodingStream) {\n      throw new Error('Undefined decoding stream, aborting.');\n    }\n\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\n    const error = (err: any) => this._onDecodeError(err);\n    const complete = () => { this.reset(); console.log('completed'); };\n\n    decodingStream.subscribe(next, error, complete);\n  }\n\n  /**\n   * Handles decode errors.\n   */\n  private _onDecodeError(err: any) {\n    this.dispatchScanError(err);\n    this.reset();\n  }\n\n  /**\n   * Handles decode results.\n   */\n  private _onDecodeResult(result: Result, error: Exception): void {\n\n    if (result) {\n      this.dispatchScanSuccess(result);\n    } else {\n      this.dispatchScanFailure(error);\n    }\n\n    this.dispatchScanComplete(result);\n  }\n\n  /**\n   * Stops the code reader and returns the previous selected device.\n   */\n  private _reset(): MediaDeviceInfo {\n\n    if (!this._codeReader) {\n      return;\n    }\n\n    const device = this.device;\n    // do not set this.device inside this method, it would create a recursive loop\n    this._device = null;\n\n    this._codeReader.reset();\n\n    return device;\n  }\n\n  /**\n   * Resets the scanner and emits device change.\n   */\n  public reset(): void {\n    this._reset();\n    this.deviceChange.emit(null);\n  }\n\n  /**\n   * Sets the permission value and emmits the event.\n   */\n  private setPermission(hasPermission: boolean | null): void {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n  }\n\n}\n","<video #preview [style.object-fit]=\"previewFitMode\">\n  <p>\n    Your browser does not support this feature, please try to upgrade it.\n  </p>\n  <p>\n    Seu navegador não suporta este recurso, por favor tente atualizá-lo.\n  </p>\n</video>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ZXingScannerComponent],\n  exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule { }\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from './lib/zxing-scanner.module';\nexport * from './lib/zxing-scanner.component';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-info-dialog',\n  templateUrl: './app-info-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppInfoDialogComponent {\n\n  hasDevices: boolean;\n  hasPermission: boolean;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\n  ) {\n    this.hasDevices = data.hasDevices;\n    this.hasPermission = data.hasPermission;\n  }\n\n}\n","<app-info [hasDevices]=\"hasDevices\" [hasPermission]=\"hasPermission\"></app-info>\n\n<mat-dialog-actions>\n  <button mat-flat-button color=\"primary\" mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import { Component, Input, VERSION, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './app-info.component.html',\n  styleUrls: ['./app-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppInfoComponent {\n\n  ngVersion = VERSION.full;\n\n  @Input()\n  hasDevices: boolean;\n\n  @Input()\n  hasPermission: boolean;\n\n  stateToEmoji(state: boolean): string {\n\n    const states = {\n      // not checked\n      undefined: '❔',\n      // failed to check\n      null: '⭕',\n      // success\n      true: '✔',\n      // can't touch that\n      false: '❌'\n    };\n\n    return states['' + state];\n  }\n}\n","<table class=\"table-scanner-state\">\n  <thead>\n    <tr>\n      <th>Status</th>\n      <th>Property</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>{{ stateToEmoji(hasDevices) }}</code></td>\n      <td>Devices</td>\n    </tr>\n    <tr>\n      <td><code>{{ stateToEmoji(hasPermission) }}</code></td>\n      <td>Permissions</td>\n    </tr>\n  </tbody>\n</table>\n\n<p matLine class=\"ng-version\">Angular version: {{ ngVersion }}</p>\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ZXingScannerModule } from './public_api';\n\nconst UI_MODULES = [\n\n  // Angular\n  BrowserAnimationsModule,\n  FormsModule,\n\n  // Material\n  MatDialogModule,\n  MatListModule,\n  MatTooltipModule,\n  MatButtonModule,\n  MatFormFieldModule,\n  MatSelectModule,\n  MatInputModule,\n  MatMenuModule,\n  MatIconModule,\n\n  // Local\n  ZXingScannerModule,\n\n];\n\n@NgModule({ exports: UI_MODULES })\nexport class AppUiModule { }\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BarcodeFormat } from '@zxing/library';\nimport { BehaviorSubject } from 'rxjs';\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  availableDevices: MediaDeviceInfo[];\n  currentDevice: MediaDeviceInfo = null;\n\n  formatsEnabled: BarcodeFormat[] = [\n    BarcodeFormat.CODE_39,\n    BarcodeFormat.CODE_93,\n    BarcodeFormat.CODE_128,\n    BarcodeFormat.EAN_8,\n    BarcodeFormat.EAN_13,\n    BarcodeFormat.UPC_A,\n    BarcodeFormat.UPC_E,\n    BarcodeFormat.QR_CODE,\n  ];\n\n  hasDevices: boolean;\n  hasPermission: boolean;\n\n  qrResultString: string;\n\n  torchEnabled = false;\n  torchAvailable$ = new BehaviorSubject<boolean>(false);\n  tryHarder = false;\n\n  constructor(private readonly _dialog: MatDialog) { }\n\n  clearResult(): void {\n    this.qrResultString = null;\n  }\n\n  onCamerasFound(devices: MediaDeviceInfo[]): void {\n    this.availableDevices = devices;\n    this.hasDevices = Boolean(devices && devices.length);\n  }\n\n  onCodeResult(resultString: string) {\n    this.qrResultString = resultString;\n  }\n\n  onDeviceSelectChange(selected: string) {\n    const device = this.availableDevices.find(x => x.deviceId === selected);\n    this.currentDevice = device || null;\n  }\n\n  openFormatsDialog() {\n    const data = {\n      formatsEnabled: this.formatsEnabled,\n    };\n\n    this._dialog\n      .open(FormatsDialogComponent, { data })\n      .afterClosed()\n      .subscribe(x => { if (x) { this.formatsEnabled = x; } });\n  }\n\n  onHasPermission(has: boolean) {\n    this.hasPermission = has;\n  }\n\n  openInfoDialog() {\n    const data = {\n      hasDevices: this.hasDevices,\n      hasPermission: this.hasPermission,\n    };\n\n    this._dialog.open(AppInfoDialogComponent, { data });\n  }\n\n  onTorchCompatible(isCompatible: boolean): void {\n    this.torchAvailable$.next(isCompatible || false);\n  }\n\n  toggleTorch(): void {\n    this.torchEnabled = !this.torchEnabled;\n  }\n\n  toggleTryHarder(): void {\n    this.tryHarder = !this.tryHarder;\n  }\n}\n","<div class=\"scanner-shell\" [hidden]=\"!hasDevices\">\n\n  <mat-menu #appMenu=\"matMenu\">\n    <mat-selection-list>\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTryHarder()\" [selected]=\"tryHarder\">\n        Enable Try-harder\n      </mat-list-option>\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTorch()\" [selected]=\"torchEnabled\"\n        *ngIf=\"torchAvailable$ | async\">\n        Enable Torch\n      </mat-list-option>\n    </mat-selection-list>\n    <mat-divider></mat-divider>\n    <button mat-menu-item (click)=\"openFormatsDialog()\">Barcode formats</button>\n    <button mat-menu-item (click)=\"openInfoDialog()\">App info</button>\n  </mat-menu>\n\n  <header>\n    <mat-form-field appearance=\"fill\">\n      <select matNativeControl matInput (change)=\"onDeviceSelectChange($event.target.value)\">\n        <option value=\"\" [selected]=\"!currentDevice\">No Device Selected</option>\n        <option *ngFor=\"let device of availableDevices\" [value]=\"device.deviceId\"\n          [selected]=\"currentDevice && device.deviceId === currentDevice.deviceId\">{{device.label}}</option>\n      </select>\n    </mat-form-field>\n    <button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n      <mat-icon>more_vert</mat-icon>\n    </button>\n  </header>\n\n  <zxing-scanner [torch]=\"torchEnabled\" [(device)]=\"currentDevice\" (scanSuccess)=\"onCodeResult($event)\"\n    [formats]=\"formatsEnabled\" [tryHarder]=\"tryHarder\" (permissionResponse)=\"onHasPermission($event)\"\n    (camerasFound)=\"onCamerasFound($event)\" (torchCompatible)=\"onTorchCompatible($event)\"></zxing-scanner>\n\n  <section class=\"results\" *ngIf=\"qrResultString\">\n    <div>\n      <small>Result</small>\n      <strong>{{ qrResultString }}</strong>\n    </div>\n    <button mat-icon-button (click)=\"clearResult()\">&times;</button>\n  </section>\n\n</div>\n\n<ng-container *ngIf=\"hasPermission === undefined\">\n\n  <h2>Waiting for permissions.</h2>\n\n  <blockquote>\n    If your device does not has cameras, no permissions will be asked.\n  </blockquote>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasPermission === false\">\n\n  <h2>You denied the camera permission, we can't scan anything without it. 😪</h2>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasDevices === undefined\">\n\n  <h2>Couldn't check for devices.</h2>\n\n  <blockquote>\n    This may be caused by some security error.\n  </blockquote>\n\n</ng-container>\n\n<ng-container *ngIf=\"hasDevices === false\">\n\n  <h2>No devices were found.</h2>\n\n  <blockquote>\n    I believe your device has no media devices attached to.\n  </blockquote>\n\n</ng-container>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\nimport { AppInfoComponent } from './app-info/app-info.component';\nimport { AppUiModule } from './app-ui.module';\nimport { AppComponent } from './app.component';\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\n\n\n@NgModule({\n  imports: [\n\n    // Angular\n    BrowserModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n\n    // Local\n    AppUiModule,\n\n  ],\n  declarations: [AppComponent, FormatsDialogComponent, AppInfoComponent, AppInfoDialogComponent],\n  bootstrap: [AppComponent],\n  entryComponents: [FormatsDialogComponent, AppInfoDialogComponent]\n})\nexport class AppModule { }\n","import { BarcodeFormat } from '@zxing/library';\n\nexport const formatsAvailable = [\n  BarcodeFormat.CODE_39,\n  BarcodeFormat.CODE_93,\n  BarcodeFormat.CODE_128,\n  BarcodeFormat.EAN_8,\n  BarcodeFormat.EAN_13,\n  BarcodeFormat.UPC_A,\n  BarcodeFormat.UPC_E,\n  BarcodeFormat.QR_CODE,\n];\n\nexport const formatNames = [\n  'Aztec 2D barcode format.',\n  'CODABAR 1D format.',\n  'Code 39 1D format.',\n  'Code 93 1D format.',\n  'Code 128 1D format.',\n  'Data Matrix 2D barcode format.',\n  'EAN-8 1D format.',\n  'EAN-13 1D format.',\n  'ITF (Interleaved Two of Five) 1D format.',\n  'MaxiCode 2D barcode format.',\n  'PDF417 format.',\n  'QR Code 2D barcode format.',\n  'RSS 14',\n  'RSS EXPANDED',\n  'UPC-A 1D format.',\n  'UPC-E 1D format.',\n  'UPC/EAN extension format. Not a stand-alone format.',\n];\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSelectionListChange } from '@angular/material/list';\nimport { BarcodeFormat } from '@zxing/library';\nimport { formatNames, formatsAvailable } from '../barcode-formats';\n\n@Component({\n  selector: 'app-formats-dialog',\n  templateUrl: './formats-dialog.component.html',\n  styleUrls: ['./formats-dialog.component.scss']\n})\nexport class FormatsDialogComponent {\n\n  formatsAvailable = formatsAvailable;\n\n  formatsEnabled: BarcodeFormat[];\n\n  readonly formatNames = formatNames;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\n    private readonly _dialogRef: MatDialogRef<FormatsDialogComponent>,\n  ) {\n    this.formatsEnabled = data.formatsEnabled || [];\n  }\n\n  close() {\n    this._dialogRef.close(this.formatsEnabled);\n  }\n\n  isEnabled(format: BarcodeFormat) {\n    return this.formatsEnabled.find(x => x === format);\n  }\n\n  onSelectionChange(event: MatSelectionListChange) {\n    this.formatsEnabled = event.source.selectedOptions.selected.map(selected => selected.value);\n  }\n}\n","<header>\n  Available formats:\n</header>\n\n<mat-selection-list #selectedFormats (selectionChange)=\"onSelectionChange($event)\">\n  <mat-list-option *ngFor=\"let format of formatsAvailable\" checkboxPosition=\"start\" [selected]=\"isEnabled(format)\" [value]=\"format\">\n    {{ formatNames[format] }}\n  </mat-list-option>\n</mat-selection-list>\n\n<mat-dialog-actions>\n  <button mat-flat-button color=\"primary\" (click)=\"close()\">Done</button>\n</mat-dialog-actions>\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from '../../../zxing-scanner/src/public_api';\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}